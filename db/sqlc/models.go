// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2

package db

import (
	"database/sql/driver"
	"fmt"
	"time"
)

type Transactiontype string

const (
	TransactiontypeDEBIT    Transactiontype = "DEBIT"
	TransactiontypeCREDIT   Transactiontype = "CREDIT"
	TransactiontypeTRANSFER Transactiontype = "TRANSFER"
)

func (e *Transactiontype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Transactiontype(s)
	case string:
		*e = Transactiontype(s)
	default:
		return fmt.Errorf("unsupported scan type for Transactiontype: %T", src)
	}
	return nil
}

type NullTransactiontype struct {
	Transactiontype Transactiontype
	Valid           bool // Valid is true if Transactiontype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransactiontype) Scan(value interface{}) error {
	if value == nil {
		ns.Transactiontype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Transactiontype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransactiontype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Transactiontype), nil
}

type Category struct {
	ID        int64           `json:"id"`
	UserID    int64           `json:"user_id"`
	Name      string          `json:"name"`
	Type      Transactiontype `json:"type"`
	Icon      string          `json:"icon"`
	CreatedAt time.Time       `json:"created_at"`
	UpdatedAt time.Time       `json:"updated_at"`
}

type Transaction struct {
	ID         int64           `json:"id"`
	UserID     int64           `json:"user_id"`
	Amount     int64           `json:"amount"`
	Note       string          `json:"note"`
	CreatedAt  time.Time       `json:"created_at"`
	UpdatedAt  time.Time       `json:"updated_at"`
	Type       Transactiontype `json:"type"`
	CategoryID int64           `json:"category_id"`
	WalletID   int64           `json:"wallet_id"`
}

type User struct {
	ID             int64     `json:"id"`
	Email          string    `json:"email"`
	HashedPassword string    `json:"hashed_password"`
	FullName       string    `json:"full_name"`
	CreatedAt      time.Time `json:"created_at"`
}

type Wallet struct {
	ID        int64     `json:"id"`
	UserID    int64     `json:"user_id"`
	Name      string    `json:"name"`
	Balance   int64     `json:"balance"`
	Icon      string    `json:"icon"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}
