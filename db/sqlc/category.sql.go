// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: category.sql

package db

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO category (
  user_id, 
  name,
  type,
  icon
) VALUES (
  $1, $2, $3, $4
) RETURNING id, user_id, name, type, icon, created_at, updated_at
`

type CreateCategoryParams struct {
	UserID sql.NullInt64   `json:"user_id"`
	Name   string          `json:"name"`
	Type   Transactiontype `json:"type"`
	Icon   string          `json:"icon"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory,
		arg.UserID,
		arg.Name,
		arg.Type,
		arg.Icon,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Type,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM category
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT id, user_id, name, type, icon, created_at, updated_at FROM category
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Type,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, user_id, name, type, icon, created_at, updated_at FROM category 
WHERE user_id = $1
ORDER BY name
`

func (q *Queries) ListCategories(ctx context.Context, userID sql.NullInt64) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategories, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Category
	for rows.Next() {
		var i Category
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Type,
			&i.Icon,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE category SET
  name = $1,
  type = $2,
  icon = $3
WHERE id = $4
RETURNING id, user_id, name, type, icon, created_at, updated_at
`

type UpdateCategoryParams struct {
	Name string          `json:"name"`
	Type Transactiontype `json:"type"`
	Icon string          `json:"icon"`
	ID   int64           `json:"id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategory,
		arg.Name,
		arg.Type,
		arg.Icon,
		arg.ID,
	)
	var i Category
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Type,
		&i.Icon,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
