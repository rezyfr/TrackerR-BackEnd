name: Deploy to production

on:
  push:
    branches: [ master, feat/secret-manager ]

jobs:
    build-push-gcr: 
      name: Build and Push to GCP
      runs-on: ubuntu-latest
      env: 
        IMAGE_NAME: trackerr-api
        PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_EMAIL }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
          export_default_credentials: true

      - name: Read secrets from GCP Secret Manager
        run: |
          token_duration=$(gcloud secrets versions access latest --quiet --secret=ACCESS_TOKEN_DURATION)
          echo "::set-env name=TOKEN_DURATION::$token_duration"
          token_key=$(gcloud secrets versions access latest --quiet --secret=TOKEN_SYMMETRIC_KEY)
          echo "::set-env name=TOKEN_SYMMETRIC_KEY::$token_key"
          db_driver=$(gcloud secrets versions access latest --quiet --secret=DB_DRIVER)
          echo "::set-env name=DB_DRIVER::$db_driver"
          server_address=$(gcloud secrets versions access latest --quiet --secret=SERVER_ADDRESS)
          echo "::set-env name=SERVER_ADDRESS::$server_address"
          db_source=$(gcloud secrets versions access latest --quiet --secret=DB_SOURCE)
          echo "::set-env name=DB_SOURCE::$db_source"
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

      - name: Execute secret values
        run: |
          rm config.env
          echo "DB_DRIVER=$DB_DRIVER"  >> config.env
          echo "DB_SOURCE=$DB_SOURCE" >> config.env
          echo "ACCESS_TOKEN_DURATION=$TOKEN_DURATION" >> config.env
          echo "TOKEN_SYMMETRIC_KEY=$TOKEN_SYMMETRIC_KEY" >> config.env
          echo "SERVER_ADDRESS=$SERVER_ADDRESS" >> config.env
          cat config.env
      # - name: Build Docker Image
      #   run: docker build -t $IMAGE_NAME:latest .

      # - name: Automatic Tagging of Releases
      #   id: increment-git-tag
      #   run: |
      #     bash ./scripts/git_update.sh -v patch

      # - name: Configure Docker Client
      #   run: |-
      #     gcloud auth configure-docker --quiet
      #     gcloud auth configure-docker asia-southeast2-docker.pkg.dev --quiet

      # - name: Push Docker Image to Container Registry (GCR)
      #   env:
      #     GIT_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
      #   run: |-
      #     docker tag $IMAGE_NAME:latest asia.gcr.io/$PROJECT_ID/$IMAGE_NAME:latest
      #     docker tag $IMAGE_NAME:latest asia.gcr.io/$PROJECT_ID/$IMAGE_NAME:$GIT_TAG
      #     docker push asia.gcr.io/$PROJECT_ID/$IMAGE_NAME:latest
      #     docker push asia.gcr.io/$PROJECT_ID/$IMAGE_NAME:$GIT_TAG
      
      # - name: Push Docker Image to Artifact Registry
      #   env:
      #     GIT_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
      #   run: |-
      #     docker tag $IMAGE_NAME:latest asia-southeast2-docker.pkg.dev/$PROJECT_ID/images/$IMAGE_NAME:latest
      #     docker tag $IMAGE_NAME:latest asia-southeast2-docker.pkg.dev/$PROJECT_ID/images/$IMAGE_NAME:$GIT_TAG
      #     docker push asia-southeast2-docker.pkg.dev/$PROJECT_ID/images/$IMAGE_NAME:latest
      #     docker push asia-southeast2-docker.pkg.dev/$PROJECT_ID/images/$IMAGE_NAME:$GIT_TAG